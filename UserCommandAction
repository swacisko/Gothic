
package gothic;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.lang.*;
import java.awt.event.*;
import java.awt.geom.*;




public class UserCommandAction extends KeyWords {
    public UserCommandAction(){
        setKeyWords();
    }
    
    public void setCommandName( String newCommandName ){
        commandName = newCommandName;
    }
    public String getCommandName(){
        return new String( commandName );
    }
    
    public void addProneToActionObject( GameObject obj ){
        proneToAction.add( obj );
    }
    
    public void setKeyWords(){}
    public void writeKeyWords(){ // need it only to check whether KeyWords work
        ArrayList<String> keyWords = getKeyWords();
        for( String s : keyWords ){
            System.out.println( s );
        }
    }
    
    private String commandName;    
    private ArrayList< GameObject > proneToAction = new ArrayList<>(50); // objects that are associated with action
            // e.g Diego is associated with Go To action, Fight Action ...
}

//********************************************************************************* FightCommand
class FightCommand extends UserCommandAction{
    public FightCommand(){
        super();
        setCommandName( GothicConstants.FightAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "fight" );
        addKeyWord( "kill" );
        addKeyWord( "defeat" );
        addKeyWord( "attack" );
    }
}

//********************************************************************************* GoToCommand
class GoToCommand extends UserCommandAction{
    public GoToCommand(){
        super();
        setCommandName( GothicConstants.GoToAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "go to" );
        addKeyWord( "find" );
        addKeyWord( "search" );
        addKeyWord( "seek" );
        addKeyWord( "look for" );
        addKeyWord( "move to" );
    }
}

//********************************************************************************** EscapeCommand
class EscapeCommand extends UserCommandAction{
    public EscapeCommand(){
        super();
        setCommandName( GothicConstants.EscapeAction );
    }   
    
    @Override
    public void setKeyWords(){
        addKeyWord( "run" );
        addKeyWord( "escape" );
        addKeyWord( "flee" );
        addKeyWord( "get away" );
    }
}

//******************************************************************************** PICK COMMAND
/*klasa PickCommand - jezeli uzytkownik bedzie chcial cos podniesc, to zostanie wywolana funkcja pick na rzecz
 * pewnego obiektu zawartego w  liscie proneToAction tej klasy
 * 
 */
class PickCommand extends UserCommandAction{
    public PickCommand(){
        super();
        setCommandName( GothicConstants.PickAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "pick" );
        addKeyWord( "pick up" );
        addKeyWord( "lift" );
        addKeyWord( "take" );
        addKeyWord( "steal" ); // jesli chce cos ukrasc, to jest to rownowazne z akcja PickCommand
    }
}
//****************************************************************************** LookAroundCommand
// klasa LookAroundCommand

class LookAroundCommand extends UserCommandAction{
    public LookAroundCommand(){
        super();
        setCommandName( GothicConstants.LookAroundAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "look around" );
        addKeyWord( "what is around" );
        addKeyWord( "show vicinity" );
        addKeyWord( "show surroundings" );
    }
}
//******************************************************************************TalkToCommand
// klasa TalkToCommand
class TalkToCommand extends UserCommandAction{
    public TalkToCommand(){
        super();
        setCommandName( GothicConstants.TalkToAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "talk to" );
        addKeyWord( "talk with" );
        addKeyWord( "speak to" );
        addKeyWord( "chat with" );
    }
    
}
// klasa TradeCommand
class TradeCommand extends UserCommandAction{
    public TradeCommand(){
        super();
        setCommandName( GothicConstants.TradeAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "trade" );
        addKeyWord( "buy" );
        addKeyWord( "sell" );
    }
    
    
}
//******************************************************************************EatDrinkCommand
// klasa EatDrinkCommand
class EatDrinkCommand extends UserCommandAction{
    public EatDrinkCommand(){
        super();
        setCommandName( GothicConstants.EatDrinkAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "eat" );
        addKeyWord( "drink" );
        addKeyWord( "nourish" );
        addKeyWord( "consume" );
        addKeyWord( "dinner" );
        addKeyWord( "supper" );
        addKeyWord( "breakfast" );
    }
    
    
}
//******************************************************************************ShowCommand
// klasa ShowCommand
class ShowCommand extends UserCommandAction{
    public ShowCommand(){
        super();
        setCommandName( GothicConstants.ShowAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "show" );
        addKeyWord( "display" );
    }
}
// klasa UseCommand - bardzo kontrowersyjna klasa
class UseCommand extends UserCommandAction{
    public UseCommand(){
        super();
        setCommandName( GothicConstants.UseAction );
    }
    
    @Override
    public void setKeyWords(){
        addKeyWord( "use" );
        addKeyWord( "expolit" );
    }
    
}

//******************************************************************************
// 

class CastCommand extends UserCommandAction {
    public CastCommand(){
        super();
        setCommandName( GothicConstants.CastAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "cast" );
    }
    
}

//******************************************************************************
//

class OpenCommand extends UserCommandAction{
    public OpenCommand(){
        super();
        setCommandName( GothicConstants.OpenAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord("open");
        addKeyWord("unlock");
    }
}

//******************************************************************************
// 

class DropCommand extends UserCommandAction{
    public DropCommand(){
        super();
        setCommandName( GothicConstants.DropAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "drop" );
        addKeyWord( "throw away" );
        addKeyWord( "throw out" );
        addKeyWord( "get rid of" );
    }
}

//******************************************************************************
//

class CookCommand extends UserCommandAction{
    public CookCommand(){
        super();
        setCommandName( GothicConstants.CookAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "cook" );
        addKeyWord( "fry" );
        addKeyWord( "bake" );
    }
}

//****************************************************************************** 
//BuyCommand to TradeCommand
/*
class BuyCommand extends UserCommandAction{
    public BuyCommand(){
        super();
        setCommandName( GothicConstants.BuyAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "buy" );
        addKeyWord( "purchase" );
        addKeyWord( "acquire" );
    }
}

//******************************************************************************
// SellCommand to TradeCommand

class SellCommand extends UserCommandAction{
    public SellCommand(){
        super();
        setCommandName( GothicConstants.SellAction );
    }
    @Override
    public void setKeyWords(){
        addKeyWord( "sell" );
    }
}*/

//******************************************************************************
// 


//*********************************************************************************************************
/* klasa NoCommand - jesli z polecenia uzytkownika nie zostanie znaleziona zadna inna akcja UCA to zostanie
 * zwrocony egzemplarz NoCommand. Wtedy powinno zostac zwrocone polecenie sparafrazowania polecenia uzytkownika
 * lub tez
 */
class NoCommand extends UserCommandAction{ 
                                               
    public NoCommand(){
        super();
        setCommandName( GothicConstants.NoCommand );
    }
    
    public String getRandomAnswer(){
        int r = new Random().nextInt( answers.length );
        return new String( answers[r] );
    }
    
    private String[] answers = {
        "I don't understand, can you repeat?",
        "Please state your will more precisely",
        "You can't do that!",
        "What are you talking about?",
        "That's impossible!",
        "Please tell me what do you mean once again",
        "I have no idea what you are talking about...",
        "I'm confused...I didn't understand a single word...",
        "Are you mad?!"
    };
    
}


